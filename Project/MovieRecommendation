#1. ETL: Load Movie Metadata
import pandas as pd
import sqlite3

movies = pd.read_csv('data/movies.csv')
ratings = pd.read_csv('data/ratings.csv')

conn = sqlite3.connect('movies.db')
movies.to_sql('movies', conn, if_exists='replace', index=False)
ratings.to_sql('ratings', conn, if_exists='replace', index=False)
conn.close()

# #2. SQL Query: Top Rated Movies
# SELECT m.title, AVG(r.rating) AS avg_rating, COUNT(*) AS rating_count
# FROM ratings r
# JOIN movies m ON r.movieId = m.movieId
# GROUP BY r.movieId
# HAVING rating_count > 100
# ORDER BY avg_rating DESC
# LIMIT 10;

#3. Recommendation Logic (Python):
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

# Assume 'genres' column has genre strings like "Action|Adventure|Sci-Fi"
movies = pd.read_csv("data/movies.csv")
movies['genres'] = movies['genres'].str.replace('|', ' ', regex=False)

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['genres'])

cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

def recommend(title, cosine_sim=cosine_sim):
    idx = movies[movies['title'].str.contains(title, case=False)].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    top_indices = [i[0] for i in sim_scores[1:6]]
    return movies.iloc[top_indices][['title', 'genres']]
