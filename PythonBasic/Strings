x = 'Pluto is a planet'
y = "Pluto is a planet"
print(x == y)

print("Pluto's a planet!")
print('My dog is named "Pluto"')

print('Pluto\'s a planet!')

print("hello")
print("world")
print("hello", end='')
print("pluto", end='')


'''Strings can be thought of as sequences of characters. 
Almost everything we've seen that we can do to a list 
But a major way in which they differ from lists is that they are immutable. 
We can't modify them.'''
# Indexing
planet = 'Pluto'
planet[0]
# Slicing
planet[-3:]
#string[start:stop:step]
# start: index to begin slicing (inclusive)
# stop: index to end slicing (exclusive)
# step: how many characters to skip
s = "hello world"
print(s[0:5])     # 'hello' (characters from index 0 to 4)
print(s[6:])      # 'world' (from index 6 to end)
print(s[:5])      # 'hello' (from start to index 4)
print(s[::2])     # 'hlowrd' (every second character)
print(s[::-1])    # 'dlrow olleh' (reverses the string)

#length
len(planet)
# loop over String
[char+'! ' for char in planet]
# ALL CAPS
claim = "Pluto is a planet!"
claim.upper()
# all lowercase
claim.lower()
# Searching for the first index of a substring
claim.index('plan')
claim.startswith(planet)
# false because of missing exclamation mark
claim.endswith('planet')

'''str.split() turns a string into a list of smaller strings, 
breaking on whitespace by default. 
This is super useful for taking you from one big string to a list of words.'''
words = claim.split()
words
datestr = '1956-01-31'
year, month, day = datestr.split('-')
'/'.join([month, day, year])
' üëè '.join([word.upper() for word in words])
planet + ', we miss you.'
#can only concatenate str (not "int") to str
position = 9
planet + ", you'll always be the " + str(position) + "th planet to me."
"{}, you'll always be the {}th planet to me.".format(planet, position)


pluto_mass = 1.303 * 10**22
earth_mass = 5.9722 * 10**24
population = 52910390
# 2 decimal points   3 decimal points, format as percent     separate with commas
"{} weighs about {:.2} kilograms ({:.3%} of Earth's mass). It is home to {:,} Plutonians.".format(
    planet, pluto_mass, pluto_mass / earth_mass, population,
)

# Referring to format() arguments by index, starting from 0
s = """Pluto's a {0}.
No, it's a {1}.
{0}!
{1}!""".format('planet', 'dwarf planet')
print(s)

# Dictionaries are a built-in Python data structure for mapping keys to values
numbers = {'one':1, 'two':2, 'three':3}
numbers['one']
numbers['eleven'] = 11
numbers['one'] = 'Pluto'

planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
planet_to_initial = {planet: planet[0] for planet in planets}

'Saturn' in planet_to_initial

'Betelgeuse' in planet_to_initial

for k in numbers:
    print("{} = {}".format(k, numbers[k]))

# Get all the initials, sort them alphabetically, and put them in a space-separated string.
' '.join(sorted(planet_to_initial.values()))

for planet, initial in planet_to_initial.items():
    print("{} begins with \"{}\"".format(planet.rjust(10), initial))    
