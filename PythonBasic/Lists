#Lists are used to store multiple items in a single variable.
#Lists allow duplicate values
primes = [2, 3, 5, 7]

planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']

hands = [['J', 'Q', 'K'], ['2', '2', '2'], ['6', 'A', 'K']]

my_favourite_things = [32, 'raindrops on roses', help]

#indexing
print(planets[0])
print(planets[-1])

#scaling
print(planets[0:3])
print(planets[:3])
print(planets[3:])
print(planets[1:-1]) # All the planets except the first and last
print(planets[-3:]) # The last 3 planets

#Lists are "mutable", meaning they can be modified "in place". 
# One way to modify a list is to assign to an index or slice expression.

planets[3] = 'Malacandra'
print(planets)

planets[:3] = ['Mur', 'Vee', 'Ur']
print(planets)


planets[:3] = ['Mercury', 'Venus', 'Earth','Mars']
print(planets)

print(len(planets))

# The planets sorted in alphabetical order
print(sorted(planets))

print(sum(primes))

#print(sum(planets))

print(max(primes))

#Interlude: objects
x = 12 # x is a real number, so its imaginary part is 0.
print(x.imag) # Here's how to make a complex number, in case you've ever been curious:
c = 12 + 3j
print(c.imag)

'''The things an object carries around can also include functions.
 A function attached to an object is called a method. 
 (Non-function things attached to an object, such as imag, are called attributes).'''

print(x.bit_length) # numbers have a method called bit_length.
print(x.bit_length()) # to actually call it

#list.append modifies a list by adding an item to the end:
planets.append('Pluto')

#list.pop removes and returns the last element of a list:
planets.pop()

#Where does Earth fall in the order of planets? We can get its index using the list.index method.
print(planets.index('Earth'))

#in operator to determine whether a list contains a particular value
print("Earth" in planets)
print("Calbefraques" in planets)


'''Tuples
Tuples are almost exactly the same as lists. They differ in just two ways.
1: The syntax for creating them uses parentheses instead of square brackets
2: They cannot be modified (they are immutable).'''

t = (1, 2, 3)
t1 = 1,2,3
print(type(t1))

#t[0] = 100

#Tuples are often used for functions that have multiple return values.
#The as_integer_ratio() method of float objects 
# returns a numerator and a denominator in the form of a tuple:
x = 0.125
print(x.as_integer_ratio())
#These multiple return values can be individually assigned as follows:
numerator, denominator = x.as_integer_ratio()
print(numerator / denominator)

#swapping two variables : 
a = 1
b = 0
a, b = b, a
print(a, b)

# def losing_team_captain(teams):
#     """Given a list of teams, where each team is a list of names, return the 2nd player (captain)
#     from the last listed team
#     """
#     return teams[-1][1]

# def purple_shell(racers):
#     """Given a list of racers, set the first place racer (at the front of the list) to last
#     place and vice versa.
    
#     >>> r = ["Mario", "Bowser", "Luigi"]
#     >>> purple_shell(r)
#     >>> r
#     ["Luigi", "Bowser", "Mario"]
#     """
#     a = racers[0]
#     racers[0]=racers[-1]
#     racers[-1]=a


#     """Given an ordered list of arrivals to the party 
#     and a name, return whether the guest with that
#     name was fashionably late."""
# def fashionably_late(arrivals, name):
#     order = arrivals.index(name)
#     return order >= len(arrivals) / 2 and order != len(arrivals) - 1

#Using the list() constructor to make a List:
thislist = list(("apple", "banana", "cherry"))
print(thislist)

'''Python Collections (Arrays)
There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
Dictionary is a collection which is ordered** and changeable. No duplicate members.'''

#The insert() method inserts an item at the specified index
thislist = ["apple", "banana", "cherry"]
thislist.insert(2, "watermelon")
print(thislist)

#To append elements from another list to the current list, 
# use the extend() method.
thislist = ["apple", "banana", "cherry"]
tropical = ["mango", "pineapple", "papaya"]
thislist.extend(tropical)
print(thislist)

#The extend() method does not have to append lists, 
# you can add any iterable object (tuples, sets, dictionaries etc.).
thislist = ["apple", "banana", "cherry"]
thistuple = ("kiwi", "orange")
thislist.extend(thistuple)
print(thislist)

#The remove() method removes the specified item.
thislist = ["apple", "banana", "cherry"]
thislist.remove("banana")
print(thislist)

#The pop() method removes the specified index.
thislist = ["apple", "banana", "cherry"]
thislist.pop(1)
print(thislist)

#If you do not specify the index, the pop() method removes the last item.
thislist = ["apple", "banana", "cherry"]
thislist.pop()
print(thislist)

#The del keyword also removes the specified index
thislist = ["apple", "banana", "cherry"]
del thislist[0]
print(thislist)

#The del keyword can also delete the list completely.
thislist = ["apple", "banana", "cherry"]
del thislist

#The clear() method empties the list.
thislist = ["apple", "banana", "cherry"]
thislist.clear()
print(thislist)

#Loop Through the Index Numbers
thislist = ["apple", "banana", "cherry"]
for i in range(len(thislist)):
  print(thislist[i])

#Print all items, using a while loop to go through all the index numbers
thislist = ["apple", "banana", "cherry"]
i = 0
while i < len(thislist):
  print(thislist[i])
  i = i + 1  


#List comprehension offers a shorter syntax when 
# you want to create a new list based on the values of an existing list.
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = [x for x in fruits if "a" in x]
print(newlist)

#The Syntax
#newlist = [expression for item in iterable if condition == True]

#The expression is the current item in the iteration, 
# but it is also the outcome, 
# which you can manipulate before it ends up like a list item in the new list
newlist = [x.upper() for x in fruits]

#List objects have a sort() method 
# that will sort the list alphanumerically, ascending, by default
thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()
print(thislist)

thislist = [100, 50, 65, 82, 23]
thislist.sort()
print(thislist)


#To sort descending, use the keyword argument reverse = True
thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort(reverse = True)
print(thislist)

#You can also customize your own function by 
# using the keyword argument key = function
def myfunc(n):
  return abs(n - 50)
thislist = [100, 50, 65, 82, 23]
thislist.sort(key = myfunc)
print(thislist)

#By default the sort() method is case sensitive, 
#resulting in all capital letters being sorted before lower case letters
#Case sensitive sorting can give an unexpected result:
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort()
print(thislist)

#if you want a case-insensitive sort function, use str.lower as a key function
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.sort(key = str.lower)
print(thislist)

#The reverse() method reverses the current sorting order of the elements.
thislist = ["banana", "Orange", "Kiwi", "cherry"]
thislist.reverse()
print(thislist)

#Make a copy of a list with the copy() method
thislist = ["apple", "banana", "cherry"]
mylist = thislist.copy()
print(mylist)

#Make a copy of a list with the list() method:
thislist = ["apple", "banana", "cherry"]
mylist = list(thislist)
print(mylist)

#Make a copy of a list with the : operator:
thislist = ["apple", "banana", "cherry"]
mylist = thislist[:]
print(mylist)

#Join two list:
list1 = ["a", "b", "c"]
list2 = [1, 2, 3]
list3 = list1 + list2
print(list3)

#Append list2 into list1:
list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]
for x in list2:
  list1.append(x)
print(list1)

#Use the extend() method to add list2 at the end of list1:
list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]
list1.extend(list2)
print(list1)

'''Method	Description
append()	Adds an element at the end of the list
clear()	    Removes all the elements from the list
copy()	    Returns a copy of the list
count()	    Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	    Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	    Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	    Sorts the list
'''
