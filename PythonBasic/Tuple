#Tuples are used to store multiple items in a single variable.
#A tuple is a collection which is ordered and unchangeable.
'''Tuple Items
Tuple items are ordered, unchangeable, and allow duplicate values.
Tuple items are indexed, the first item has index [0], the second 
item has index [1] etc.

Ordered
When we say that tuples are ordered, 
it means that the items have a defined order, 
and that order will not change.

Unchangeable
Tuples are unchangeable, meaning that we cannot change, 
add or remove items after the tuple has been created.

Allow Duplicates
Since tuples are indexed, they can have items with the same value
'''

thistuple = ("apple", "banana", "cherry")
print(len(thistuple))

'''To create a tuple with only one item, 
you have to add a comma after the item, 
otherwise Python will not recognize it as a tuple.'''
thistuple = ("apple",)
print(type(thistuple))

#NOT a tuple
thistuple = ("apple")
print(type(thistuple))

'''Tuple items can be of any data type, 
A tuple can contain different data types'''

#It is also possible to use the tuple() constructor to make a tuple
thistuple = tuple(("apple", "banana", "cherry")) # note the double round-brackets
print(thistuple)

'''Range of Indexes
You can specify a range of indexes by specifying 
where to start and where to end the range.
When specifying a range, the return value will be 
a new tuple with the specified items.'''
#Return the third, fourth, and fifth item:
thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(thistuple[2:5])

#Check if "apple" is present in the tuple:
thistuple = ("apple", "banana", "cherry")
if "apple" in thistuple:
  print("Yes, 'apple' is in the fruits tuple")

'''Once a tuple is created, you cannot change its values. 
Tuples are unchangeable, or immutable as it also is called.
But there is a workaround. You can convert the tuple into a list, 
change the list, and convert the list back into a tuple.''' 
x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)
print(x)

'''Add tuple to a tuple. 
You are allowed to add tuples to tuples, 
so if you want to add one item, (or many), 
create a new tuple with the item(s), and add it to the existing tuple'''
thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y
print(thistuple)

#Convert the tuple into a list, remove "apple", and convert it back into a tuple:
thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.remove("apple")
thistuple = tuple(y)

#The del keyword can delete the tuple completely:
thistuple = ("apple", "banana", "cherry")
del thistuple
print(thistuple)

'''in Python, we are also allowed to extract the values back into variables. 
This is called "unpacking"'''
#Unpacking a tuple
fruits = ("apple", "banana", "cherry")
(green, yellow, red) = fruits
print(green)
print(yellow)
print(red)

'''If the number of variables is less than the number of values, 
you can add an * to the variable name and the values will be assigned 
to the variable as a list'''
fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")
(green, yellow, *red) = fruits
print(green)
print(yellow)
print(red)

'''If the asterisk is added to another variable name than the last, 
Python will assign values to the variable until the number of values 
left matches the number of variables left.'''
fruits = ("apple", "mango", "papaya", "pineapple", "cherry")
(green, *tropic, red) = fruits
print(green)
print(tropic)
print(red)

#Iterate through the items and print the values
thistuple = ("apple", "banana", "cherry")
for x in thistuple:
  print(x)

#Use the range() and len() functions to create a suitable iterable
thistuple = ("apple", "banana", "cherry")
for i in range(len(thistuple)):
  print(thistuple[i])

#Print all items, using a while loop to go through all the index numbers
thistuple = ("apple", "banana", "cherry")
i = 0
while i < len(thistuple):
  print(thistuple[i])
  i = i + 1  

#Join two tuples:
tuple1 = ("a", "b" , "c")
tuple2 = (1, 2, 3)
tuple3 = tuple1 + tuple2
print(tuple3) 

#Multiply the fruits tuple by 2:
fruits = ("apple", "banana", "cherry")
mytuple = fruits * 2
print(mytuple)

'''Method	Description
count()	    Returns the number of times a specified value occurs in a tuple
index()	    Searches the tuple for a specified value and returns the position of where it was found'''
