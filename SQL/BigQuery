from google.cloud import bigquery
-- Create a "Client" object
client = bigquery.Client()
--Construct a reference to the "hacker_news" dataset
dataset_ref = client.dataset("hacker_news", project="bigquery-public-data")
--API request - fetch the dataset
dataset = client.get_dataset(dataset_ref)
--List all the tables in the "hacker_news" dataset
tables = list(client.list_tables(dataset))
--Print names of all tables in the dataset (there are four!)
for table in tables:  
    print(table.table_id)
--Construct a reference to the "full" table
table_ref = dataset_ref.table("full")
--API request - fetch the table
table = client.get_table(table_ref)   
--Print information on all the columns in the "full" table in the "hacker_news" dataset
table.schema   
-- Each SchemaField tells us about a specific column 
--(which we also refer to as a field). In order, the information is:
-- The name of the column
-- The field type (or datatype) in the column
-- The mode of the column ('NULLABLE' means that a column allows NULL values, and is the default)
-- A description of the data in that column
SchemaField('by', 'string', 'NULLABLE', "The username of the item's author.",())
-- This tells us:
-- the field (or column) is called by,
-- the data in this field is strings,
-- NULL values are allowed, and
-- it contains the usernames corresponding to each item's author.


-- We can use the list_rows() method to check just the first five lines 
-- of of the full table to make sure this is right. 
-- (Sometimes databases have outdated descriptions, so it's good to check.) 
-- This returns a BigQuery RowIterator object that can quickly be converted 
-- to a pandas DataFrame with the to_dataframe() method.

--Preview the first five lines of the "full" table
client.list_rows(table, max_results=5).to_dataframe()

--The list_rows() method will also let us look at just the information in a specific column.
--Preview the first five entries in the "by" column of the "full" table
client.list_rows(table, selected_fields=table.schema[:1], max_results=5).to_dataframe()